<#@ template language="C#" #>
<#@ output extension=".gen.cs" #>
//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------
<#@ include file="$(ProjectDir)\_Include\_0_AssemplyImports.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_2_GlobalTTInclude.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_4_typeDeclaration.ttinclude" #>

<#@ include file="$(ProjectDir)\_Include\_6_Vec2D_typeInitialization.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_6_Vec3D_typeInitialization.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_6_Vec4D_typeInitialization.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_6_QuaternionD_typeInitialization.ttinclude" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;

namespace <#=globalNamespaceName#>
{
    public static partial class VectorLike
    {
<# 
for(var a = 0; a<availableTypes.Count; a++)
    {
    UnfoldTypeDescription(availableTypes[a]);
#>
		public static void Deconstruct( this <#=typeName#> vectorLike, <#=String.Join(", ",fieldNames.Select((x,i)=> $"out {b.type} {x}"))#>)
		{
<# foreach (var f in fieldNames) { #>
			<#=f#> = vectorLike.<#=f#>;
<# } #>
		}

<# } #>
    }
}
