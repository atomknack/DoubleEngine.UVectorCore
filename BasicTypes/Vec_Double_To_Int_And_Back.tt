<#@ template language="C#" hostspecific="True"#>
<#@ output extension=".gen.cs" #>
<#@ include file="$(ProjectDir)\_Include\_0_AssemplyImports.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_2_GlobalTTInclude.ttinclude" #>
//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------
using System;

namespace <#=globalNamespaceName#>
{
<# 
string[] intTypeNames = 
{
"Vec2I",
"Vec3I",
};

string[] typeNames = 
{
"Vec2D",
"Vec3D",
}; 
string[][] typeFieldNames =
{
    new string[] {"x","y"},
    new string[] {"x","y","z"},
    new string[] {"x","y","z","w"},
    new string[] {"x","y","z","w"}
};
for(var i = 0; i<intTypeNames.Length; i++){
string typeName = typeNames[i]; 
string intType = intTypeNames[i];
string[] fieldNames = typeFieldNames[i];
#>
    public readonly partial struct <#=typeName#> : IConvertibleToOut<<#=intType#>>
    {
        public <#=intType#> ConvertTo(out <#=intType#> v)
        {
            v = To<#=intType#>(this);
            return v;
        }
        public <#=intType#> To<#=intType#>() => To<#=intType#>(this);
        public static <#=intType#> To<#=intType#>(<#=typeName#> d) => new <#=intType#>(<#=String.Join(", ",fieldNames.Select(x=> $"(int)d.{x}"))#>);
        public static <#=typeName#> From<#=intType#>(<#=intType#> u) => new <#=typeName#>(<#=String.Join(", ",fieldNames.Select(x=> $"u.{x}"))#>);
    }

<# } #>

}