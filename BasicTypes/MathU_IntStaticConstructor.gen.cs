//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;

namespace DoubleEngine
{
    public static partial class MathU
    {
        private const int DEGREES = 360;

        private static double[] sinDouble;
        private static double[] cosDouble;
        private static float[] sinFloat;
        private static float[] cosFloat;

        static MathU()
        {
            sinDouble = new double[DEGREES];
            cosDouble = new double[DEGREES];
            sinFloat = new float[DEGREES];
            cosFloat = new float[DEGREES];
            for (int i = 0; i < DEGREES; i++)
            {
                sinDouble[i] = (double)Math.Sin((double)i);
                cosDouble[i] = (double)Math.Cos((double)i);
                sinFloat[i] = (float)Math.Sin((double)i);
                cosFloat[i] = (float)Math.Cos((double)i);
            }
        } 
        // all function here need testing
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double DegreesSin_Double(int deg) => sinDouble[DegreesTo360PositiveDegrees(deg)];
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double DegreesCos_Double(int deg) => cosDouble[DegreesTo360PositiveDegrees(deg)];
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double DegreesToRadians_Double(int deg) => DegreesToRadians((double)DegreesTo360PositiveDegrees(deg));
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double DegreesToHalfRadians_Double(int deg) => DegreesToRadians((double)DegreesTo360PositiveDegrees(deg));

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float DegreesSin_Float(int deg) => sinFloat[DegreesTo360PositiveDegrees(deg)];
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float DegreesCos_Float(int deg) => cosFloat[DegreesTo360PositiveDegrees(deg)];
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float DegreesToRadians_Float(int deg) => DegreesToRadians((float)DegreesTo360PositiveDegrees(deg));
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float DegreesToHalfRadians_Float(int deg) => DegreesToRadians((float)DegreesTo360PositiveDegrees(deg));

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int DegreesTo360PositiveDegrees(int deg)
        {
            deg = deg % DEGREES;
            return deg < 0 ? DEGREES + deg : deg;
        }
    }
}
