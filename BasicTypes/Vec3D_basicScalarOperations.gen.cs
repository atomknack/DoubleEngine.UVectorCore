//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a _VectorLike_basicScalarOperations.tt
//     Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;

namespace VectorCore
{

public readonly partial struct Vec3D
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3D operator +(in Vec3D vector, double scalar) => new Vec3D ( vector.x + scalar, vector.y + scalar, vector.z + scalar );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3D operator -(in Vec3D vector) => new Vec3D ( -vector.x, -vector.y, -vector.z );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3D operator -(in Vec3D vector, double scalar) => new Vec3D ( vector.x - scalar, vector.y - scalar, vector.z - scalar );

    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3D operator *(in Vec3D vector, double scalar) => new Vec3D ( vector.x * scalar, vector.y * scalar, vector.z * scalar );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3D Multiply(in Vec3D vector, double scalar) => new Vec3D ( vector.x * scalar, vector.y * scalar, vector.z * scalar );

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Vec3D Multiplied(double scalar) => new Vec3D ( x * scalar, y * scalar, z * scalar );
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3D operator /(in Vec3D vector, double scalarDivider) => new Vec3D ( vector.x / scalarDivider, vector.y / scalarDivider, vector.z / scalarDivider );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3D Divide(in Vec3D vector, double scalarDivider) => new Vec3D ( vector.x / scalarDivider, vector.y / scalarDivider, vector.z / scalarDivider );

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Vec3D DividedBy(double divider) => new Vec3D ( x / divider, y / divider, z / divider );

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3D operator %(in Vec3D vector, double scalarDivider) => new Vec3D ( vector.x % scalarDivider, vector.y % scalarDivider, vector.z % scalarDivider );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3D RemainderOfDivision(in Vec3D vector, double scalarDivider) => new Vec3D ( vector.x % scalarDivider, vector.y % scalarDivider, vector.z % scalarDivider );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Vec3D RemainderOfDivision(double divider) => new Vec3D ( x % divider, y % divider, z % divider );

    /*
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3D operator +(in Vec3D lhs, in Vec3D r) => new Vec3D ( lhs.x + r.x, lhs.y + r.y, lhs.z + r.z );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3D AddVect(in Vec3D lhs, in Vec3D r) => new Vec3D ( lhs.x + r.x, lhs.y + r.y, lhs.z + r.z );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Vec3D AddedVect(in Vec3D vector) => new Vec3D ( x + vector.x, y + vector.y, z + vector.z );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3D operator -(in Vec3D lhs, in Vec3D r) => new Vec3D ( lhs.x - r.x, lhs.y - r.y, lhs.z - r.z );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3D MultiplyVect(in Vec3D lhs, in Vec3D r) => new Vec3D ( lhs.x * r.x, lhs.y * r.y, lhs.z * r.z );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Vec3D MultipliedVect(in Vec3D vector) => new Vec3D ( x * vector.x, y * vector.y, z * vector.z );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3D DivideVect(in Vec3D vector, in Vec3D divider) => new Vec3D ( vector.x / divider.x, vector.y / divider.y, vector.z / divider.z );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Vec3D DividedByVect(in Vec3D divider) => new Vec3D ( x / divider.x, y / divider.y, z / divider.z );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3D RemainderOfDivisionVect(in Vec3D vector, in Vec3D divider) => new Vec3D ( vector.x % divider.x, vector.y % divider.y, vector.z % divider.z );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Vec3D RemainderOfDivisionVect(in Vec3D divider) => new Vec3D ( x % divider.x, y % divider.y, z % divider.z );
    */
}

}
