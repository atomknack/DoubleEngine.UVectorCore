//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a _VectorLike_basicVectOperations.tt
//     Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;

namespace DoubleEngine
{

public readonly partial struct Vec3I
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3I operator +(in Vec3I lhs, in Vec3I r) => new Vec3I ( lhs.x + r.x, lhs.y + r.y, lhs.z + r.z );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3I AddVect(in Vec3I lhs, in Vec3I r) => new Vec3I ( lhs.x + r.x, lhs.y + r.y, lhs.z + r.z );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Vec3I AddedVect(in Vec3I vector) => new Vec3I ( x + vector.x, y + vector.y, z + vector.z );

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3I operator -(in Vec3I lhs, in Vec3I r) => new Vec3I ( lhs.x - r.x, lhs.y - r.y, lhs.z - r.z );
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3I MultiplyVect(in Vec3I lhs, in Vec3I r) => new Vec3I ( lhs.x * r.x, lhs.y * r.y, lhs.z * r.z );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Vec3I MultipliedVect(in Vec3I vector) => new Vec3I ( x * vector.x, y * vector.y, z * vector.z );
    

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3I DivideVect(in Vec3I vector, in Vec3I divider) => new Vec3I ( vector.x / divider.x, vector.y / divider.y, vector.z / divider.z );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Vec3I DividedByVect(in Vec3I divider) => new Vec3I ( x / divider.x, y / divider.y, z / divider.z );

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec3I RemainderOfDivisionVect(in Vec3I vector, in Vec3I divider) => new Vec3I ( vector.x % divider.x, vector.y % divider.y, vector.z % divider.z );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Vec3I RemainderOfDivisionVect(in Vec3I divider) => new Vec3I ( x % divider.x, y % divider.y, z % divider.z );

}

}
