//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a _VectorLike_basicScalarOperations.tt
//     Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;

namespace DoubleEngine
{

public readonly partial struct Vec2F
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec2F operator +(in Vec2F vector, float scalar) => new Vec2F ( vector.x + scalar, vector.y + scalar );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec2F operator -(in Vec2F vector) => new Vec2F ( -vector.x, -vector.y );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec2F operator -(in Vec2F vector, float scalar) => new Vec2F ( vector.x - scalar, vector.y - scalar );

    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec2F operator *(in Vec2F vector, float scalar) => new Vec2F ( vector.x * scalar, vector.y * scalar );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec2F Multiply(in Vec2F vector, float scalar) => new Vec2F ( vector.x * scalar, vector.y * scalar );

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Vec2F Multiplied(float scalar) => new Vec2F ( x * scalar, y * scalar );
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec2F operator /(in Vec2F vector, float scalarDivider) => new Vec2F ( vector.x / scalarDivider, vector.y / scalarDivider );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec2F Divide(in Vec2F vector, float scalarDivider) => new Vec2F ( vector.x / scalarDivider, vector.y / scalarDivider );

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Vec2F DividedBy(float divider) => new Vec2F ( x / divider, y / divider );

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec2F operator %(in Vec2F vector, float scalarDivider) => new Vec2F ( vector.x % scalarDivider, vector.y % scalarDivider );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec2F RemainderOfDivision(in Vec2F vector, float scalarDivider) => new Vec2F ( vector.x % scalarDivider, vector.y % scalarDivider );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Vec2F RemainderOfDivision(float divider) => new Vec2F ( x % divider, y % divider );

    /*
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec2F operator +(in Vec2F lhs, in Vec2F r) => new Vec2F ( lhs.x + r.x, lhs.y + r.y );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec2F AddVect(in Vec2F lhs, in Vec2F r) => new Vec2F ( lhs.x + r.x, lhs.y + r.y );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Vec2F AddedVect(in Vec2F vector) => new Vec2F ( x + vector.x, y + vector.y );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec2F operator -(in Vec2F lhs, in Vec2F r) => new Vec2F ( lhs.x - r.x, lhs.y - r.y );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec2F MultiplyVect(in Vec2F lhs, in Vec2F r) => new Vec2F ( lhs.x * r.x, lhs.y * r.y );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Vec2F MultipliedVect(in Vec2F vector) => new Vec2F ( x * vector.x, y * vector.y );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec2F DivideVect(in Vec2F vector, in Vec2F divider) => new Vec2F ( vector.x / divider.x, vector.y / divider.y );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Vec2F DividedByVect(in Vec2F divider) => new Vec2F ( x / divider.x, y / divider.y );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vec2F RemainderOfDivisionVect(in Vec2F vector, in Vec2F divider) => new Vec2F ( vector.x % divider.x, vector.y % divider.y );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Vec2F RemainderOfDivisionVect(in Vec2F divider) => new Vec2F ( x % divider.x, y % divider.y );
    */
}

}
