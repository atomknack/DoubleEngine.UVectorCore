<#/*THIS IS A T4 FILE*/#>
<#@ template language="C#" #>
<#@ output extension=".gen.cs" #>
//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------
<#@ include file="$(ProjectDir)\_Include\_0_AssemplyImports.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_2_GlobalTTInclude.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_8_MatrixD4x4_type.ttinclude" #>
using System;
using System.Runtime.CompilerServices;

namespace <#=globalNamespaceName#>
{

    <#=publicReadonly#> partial struct <#=typeName#> : IFormattable
    {
        public readonly static MatrixD4x4 zero = new MatrixD4x4(
			0<#=b.valueEnding#>, 0<#=b.valueEnding#>, 0<#=b.valueEnding#>, 0<#=b.valueEnding#>,
			0<#=b.valueEnding#>, 0<#=b.valueEnding#>, 0<#=b.valueEnding#>, 0<#=b.valueEnding#>,
			0<#=b.valueEnding#>, 0<#=b.valueEnding#>, 0<#=b.valueEnding#>, 0<#=b.valueEnding#>,
			0<#=b.valueEnding#>, 0<#=b.valueEnding#>, 0<#=b.valueEnding#>, 0<#=b.valueEnding#>);
        public readonly static MatrixD4x4 identity = new MatrixD4x4(
			1<#=b.valueEnding#>, 0<#=b.valueEnding#>, 0<#=b.valueEnding#>, 0<#=b.valueEnding#>,
			0<#=b.valueEnding#>, 1<#=b.valueEnding#>, 0<#=b.valueEnding#>, 0<#=b.valueEnding#>,
			0<#=b.valueEnding#>, 0<#=b.valueEnding#>, 1<#=b.valueEnding#>, 0<#=b.valueEnding#>,
			0<#=b.valueEnding#>, 0<#=b.valueEnding#>, 0<#=b.valueEnding#>, 1<#=b.valueEnding#>);
    // File must be LF only or ToString will require CR removal: .Replace("\r", "")
    //<#=publicReadonly#> string ToString(string format)=> $"<#=String.Join(", ",fieldNames.Select((x,i)=> $"{{ {x}.ToString(format)}}"))#>";

        //<#=publicReadonly#> override string ToString() => 
        //    @$"(<#=String.Join(", ",fieldNames.Select((x,i)=> $"{{CommonHelpers.ToStringWithDot({x}, \"F2\")}}"))#>)";
    <#=publicReadonly#> override string ToString() => 
            @$"<#=String.Join("\t",fieldNames.Where((x,i)=>i<4).Select(x=> $"{{CommonHelpers.ToStringRound5WithDot({x})}}"))#>
<#=String.Join("\t",fieldNames.Where((x,i)=>i>=4&&i<8).Select(x=> $"{{CommonHelpers.ToStringRound5WithDot({x})}}"))#>
<#=String.Join("\t",fieldNames.Where((x,i)=>i>=8&&i<12).Select(x=> $"{{CommonHelpers.ToStringRound5WithDot({x})}}"))#>
<#=String.Join("\t",fieldNames.Where((x,i)=>i>=12&&i<16).Select(x=> $"{{CommonHelpers.ToStringRound5WithDot({x})}}"))#>
".Replace("\r", "");
    <#=publicReadonly#> string ToString(string format) => 
            @$"<#=String.Join("\t",fieldNames.Where((x,i)=>i<4).Select(x=> $"{{CommonHelpers.ToStringWithDot({x}, format)}}"))#>
<#=String.Join("\t",fieldNames.Where((x,i)=>i>=4&&i<8).Select(x=> $"{{CommonHelpers.ToStringWithDot({x}, format)}}"))#>
<#=String.Join("\t",fieldNames.Where((x,i)=>i>=8&&i<12).Select(x=> $"{{CommonHelpers.ToStringWithDot({x}, format)}}"))#>
<#=String.Join("\t",fieldNames.Where((x,i)=>i>=12&&i<16).Select(x=> $"{{CommonHelpers.ToStringWithDot({x}, format)}}"))#>
".Replace("\r", "");
    <#=publicReadonly#> string ToString(string format, IFormatProvider formatProvider) => 
            @$"<#=String.Join("\t",fieldNames.Where((x,i)=>i<4).Select(x=> $"{{CommonHelpers.ToStringWithDot({x}, format)}}"))#>
<#=String.Join("\t",fieldNames.Where((x,i)=>i>=4&&i<8).Select(x=> $"{{CommonHelpers.ToStringWithDot({x}, format, formatProvider)}}"))#>
<#=String.Join("\t",fieldNames.Where((x,i)=>i>=8&&i<12).Select(x=> $"{{CommonHelpers.ToStringWithDot({x}, format, formatProvider)}}"))#>
<#=String.Join("\t",fieldNames.Where((x,i)=>i>=12&&i<16).Select(x=> $"{{CommonHelpers.ToStringWithDot({x}, format, formatProvider)}}"))#>
".Replace("\r", "");

    }
}