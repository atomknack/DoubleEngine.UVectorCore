//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a _VectorLike_basicScalarOperations.tt
//     Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;

namespace DoubleEngine
{

public readonly partial struct MatrixD4x4
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static MatrixD4x4 operator +(in MatrixD4x4 vector, double scalar) => new MatrixD4x4 ( vector.m00 + scalar, vector.m01 + scalar, vector.m02 + scalar, vector.m03 + scalar, vector.m10 + scalar, vector.m11 + scalar, vector.m12 + scalar, vector.m13 + scalar, vector.m20 + scalar, vector.m21 + scalar, vector.m22 + scalar, vector.m23 + scalar, vector.m30 + scalar, vector.m31 + scalar, vector.m32 + scalar, vector.m33 + scalar );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static MatrixD4x4 operator -(in MatrixD4x4 vector) => new MatrixD4x4 ( -vector.m00, -vector.m01, -vector.m02, -vector.m03, -vector.m10, -vector.m11, -vector.m12, -vector.m13, -vector.m20, -vector.m21, -vector.m22, -vector.m23, -vector.m30, -vector.m31, -vector.m32, -vector.m33 );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static MatrixD4x4 operator -(in MatrixD4x4 vector, double scalar) => new MatrixD4x4 ( vector.m00 - scalar, vector.m01 - scalar, vector.m02 - scalar, vector.m03 - scalar, vector.m10 - scalar, vector.m11 - scalar, vector.m12 - scalar, vector.m13 - scalar, vector.m20 - scalar, vector.m21 - scalar, vector.m22 - scalar, vector.m23 - scalar, vector.m30 - scalar, vector.m31 - scalar, vector.m32 - scalar, vector.m33 - scalar );

    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static MatrixD4x4 operator *(in MatrixD4x4 vector, double scalar) => new MatrixD4x4 ( vector.m00 * scalar, vector.m01 * scalar, vector.m02 * scalar, vector.m03 * scalar, vector.m10 * scalar, vector.m11 * scalar, vector.m12 * scalar, vector.m13 * scalar, vector.m20 * scalar, vector.m21 * scalar, vector.m22 * scalar, vector.m23 * scalar, vector.m30 * scalar, vector.m31 * scalar, vector.m32 * scalar, vector.m33 * scalar );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static MatrixD4x4 Multiply(in MatrixD4x4 vector, double scalar) => new MatrixD4x4 ( vector.m00 * scalar, vector.m01 * scalar, vector.m02 * scalar, vector.m03 * scalar, vector.m10 * scalar, vector.m11 * scalar, vector.m12 * scalar, vector.m13 * scalar, vector.m20 * scalar, vector.m21 * scalar, vector.m22 * scalar, vector.m23 * scalar, vector.m30 * scalar, vector.m31 * scalar, vector.m32 * scalar, vector.m33 * scalar );

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly MatrixD4x4 Multiplied(double scalar) => new MatrixD4x4 ( m00 * scalar, m01 * scalar, m02 * scalar, m03 * scalar, m10 * scalar, m11 * scalar, m12 * scalar, m13 * scalar, m20 * scalar, m21 * scalar, m22 * scalar, m23 * scalar, m30 * scalar, m31 * scalar, m32 * scalar, m33 * scalar );
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static MatrixD4x4 operator /(in MatrixD4x4 vector, double scalarDivider) => new MatrixD4x4 ( vector.m00 / scalarDivider, vector.m01 / scalarDivider, vector.m02 / scalarDivider, vector.m03 / scalarDivider, vector.m10 / scalarDivider, vector.m11 / scalarDivider, vector.m12 / scalarDivider, vector.m13 / scalarDivider, vector.m20 / scalarDivider, vector.m21 / scalarDivider, vector.m22 / scalarDivider, vector.m23 / scalarDivider, vector.m30 / scalarDivider, vector.m31 / scalarDivider, vector.m32 / scalarDivider, vector.m33 / scalarDivider );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static MatrixD4x4 Divide(in MatrixD4x4 vector, double scalarDivider) => new MatrixD4x4 ( vector.m00 / scalarDivider, vector.m01 / scalarDivider, vector.m02 / scalarDivider, vector.m03 / scalarDivider, vector.m10 / scalarDivider, vector.m11 / scalarDivider, vector.m12 / scalarDivider, vector.m13 / scalarDivider, vector.m20 / scalarDivider, vector.m21 / scalarDivider, vector.m22 / scalarDivider, vector.m23 / scalarDivider, vector.m30 / scalarDivider, vector.m31 / scalarDivider, vector.m32 / scalarDivider, vector.m33 / scalarDivider );

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly MatrixD4x4 DividedBy(double divider) => new MatrixD4x4 ( m00 / divider, m01 / divider, m02 / divider, m03 / divider, m10 / divider, m11 / divider, m12 / divider, m13 / divider, m20 / divider, m21 / divider, m22 / divider, m23 / divider, m30 / divider, m31 / divider, m32 / divider, m33 / divider );

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static MatrixD4x4 operator %(in MatrixD4x4 vector, double scalarDivider) => new MatrixD4x4 ( vector.m00 % scalarDivider, vector.m01 % scalarDivider, vector.m02 % scalarDivider, vector.m03 % scalarDivider, vector.m10 % scalarDivider, vector.m11 % scalarDivider, vector.m12 % scalarDivider, vector.m13 % scalarDivider, vector.m20 % scalarDivider, vector.m21 % scalarDivider, vector.m22 % scalarDivider, vector.m23 % scalarDivider, vector.m30 % scalarDivider, vector.m31 % scalarDivider, vector.m32 % scalarDivider, vector.m33 % scalarDivider );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static MatrixD4x4 RemainderOfDivision(in MatrixD4x4 vector, double scalarDivider) => new MatrixD4x4 ( vector.m00 % scalarDivider, vector.m01 % scalarDivider, vector.m02 % scalarDivider, vector.m03 % scalarDivider, vector.m10 % scalarDivider, vector.m11 % scalarDivider, vector.m12 % scalarDivider, vector.m13 % scalarDivider, vector.m20 % scalarDivider, vector.m21 % scalarDivider, vector.m22 % scalarDivider, vector.m23 % scalarDivider, vector.m30 % scalarDivider, vector.m31 % scalarDivider, vector.m32 % scalarDivider, vector.m33 % scalarDivider );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly MatrixD4x4 RemainderOfDivision(double divider) => new MatrixD4x4 ( m00 % divider, m01 % divider, m02 % divider, m03 % divider, m10 % divider, m11 % divider, m12 % divider, m13 % divider, m20 % divider, m21 % divider, m22 % divider, m23 % divider, m30 % divider, m31 % divider, m32 % divider, m33 % divider );

    /*
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static MatrixD4x4 operator +(in MatrixD4x4 lhs, in MatrixD4x4 r) => new MatrixD4x4 ( lhs.m00 + r.m00, lhs.m01 + r.m01, lhs.m02 + r.m02, lhs.m03 + r.m03, lhs.m10 + r.m10, lhs.m11 + r.m11, lhs.m12 + r.m12, lhs.m13 + r.m13, lhs.m20 + r.m20, lhs.m21 + r.m21, lhs.m22 + r.m22, lhs.m23 + r.m23, lhs.m30 + r.m30, lhs.m31 + r.m31, lhs.m32 + r.m32, lhs.m33 + r.m33 );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static MatrixD4x4 AddVect(in MatrixD4x4 lhs, in MatrixD4x4 r) => new MatrixD4x4 ( lhs.m00 + r.m00, lhs.m01 + r.m01, lhs.m02 + r.m02, lhs.m03 + r.m03, lhs.m10 + r.m10, lhs.m11 + r.m11, lhs.m12 + r.m12, lhs.m13 + r.m13, lhs.m20 + r.m20, lhs.m21 + r.m21, lhs.m22 + r.m22, lhs.m23 + r.m23, lhs.m30 + r.m30, lhs.m31 + r.m31, lhs.m32 + r.m32, lhs.m33 + r.m33 );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly MatrixD4x4 AddedVect(in MatrixD4x4 vector) => new MatrixD4x4 ( m00 + vector.m00, m01 + vector.m01, m02 + vector.m02, m03 + vector.m03, m10 + vector.m10, m11 + vector.m11, m12 + vector.m12, m13 + vector.m13, m20 + vector.m20, m21 + vector.m21, m22 + vector.m22, m23 + vector.m23, m30 + vector.m30, m31 + vector.m31, m32 + vector.m32, m33 + vector.m33 );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static MatrixD4x4 operator -(in MatrixD4x4 lhs, in MatrixD4x4 r) => new MatrixD4x4 ( lhs.m00 - r.m00, lhs.m01 - r.m01, lhs.m02 - r.m02, lhs.m03 - r.m03, lhs.m10 - r.m10, lhs.m11 - r.m11, lhs.m12 - r.m12, lhs.m13 - r.m13, lhs.m20 - r.m20, lhs.m21 - r.m21, lhs.m22 - r.m22, lhs.m23 - r.m23, lhs.m30 - r.m30, lhs.m31 - r.m31, lhs.m32 - r.m32, lhs.m33 - r.m33 );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static MatrixD4x4 MultiplyVect(in MatrixD4x4 lhs, in MatrixD4x4 r) => new MatrixD4x4 ( lhs.m00 * r.m00, lhs.m01 * r.m01, lhs.m02 * r.m02, lhs.m03 * r.m03, lhs.m10 * r.m10, lhs.m11 * r.m11, lhs.m12 * r.m12, lhs.m13 * r.m13, lhs.m20 * r.m20, lhs.m21 * r.m21, lhs.m22 * r.m22, lhs.m23 * r.m23, lhs.m30 * r.m30, lhs.m31 * r.m31, lhs.m32 * r.m32, lhs.m33 * r.m33 );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly MatrixD4x4 MultipliedVect(in MatrixD4x4 vector) => new MatrixD4x4 ( m00 * vector.m00, m01 * vector.m01, m02 * vector.m02, m03 * vector.m03, m10 * vector.m10, m11 * vector.m11, m12 * vector.m12, m13 * vector.m13, m20 * vector.m20, m21 * vector.m21, m22 * vector.m22, m23 * vector.m23, m30 * vector.m30, m31 * vector.m31, m32 * vector.m32, m33 * vector.m33 );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static MatrixD4x4 DivideVect(in MatrixD4x4 vector, in MatrixD4x4 divider) => new MatrixD4x4 ( vector.m00 / divider.m00, vector.m01 / divider.m01, vector.m02 / divider.m02, vector.m03 / divider.m03, vector.m10 / divider.m10, vector.m11 / divider.m11, vector.m12 / divider.m12, vector.m13 / divider.m13, vector.m20 / divider.m20, vector.m21 / divider.m21, vector.m22 / divider.m22, vector.m23 / divider.m23, vector.m30 / divider.m30, vector.m31 / divider.m31, vector.m32 / divider.m32, vector.m33 / divider.m33 );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly MatrixD4x4 DividedByVect(in MatrixD4x4 divider) => new MatrixD4x4 ( m00 / divider.m00, m01 / divider.m01, m02 / divider.m02, m03 / divider.m03, m10 / divider.m10, m11 / divider.m11, m12 / divider.m12, m13 / divider.m13, m20 / divider.m20, m21 / divider.m21, m22 / divider.m22, m23 / divider.m23, m30 / divider.m30, m31 / divider.m31, m32 / divider.m32, m33 / divider.m33 );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static MatrixD4x4 RemainderOfDivisionVect(in MatrixD4x4 vector, in MatrixD4x4 divider) => new MatrixD4x4 ( vector.m00 % divider.m00, vector.m01 % divider.m01, vector.m02 % divider.m02, vector.m03 % divider.m03, vector.m10 % divider.m10, vector.m11 % divider.m11, vector.m12 % divider.m12, vector.m13 % divider.m13, vector.m20 % divider.m20, vector.m21 % divider.m21, vector.m22 % divider.m22, vector.m23 % divider.m23, vector.m30 % divider.m30, vector.m31 % divider.m31, vector.m32 % divider.m32, vector.m33 % divider.m33 );
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly MatrixD4x4 RemainderOfDivisionVect(in MatrixD4x4 divider) => new MatrixD4x4 ( m00 % divider.m00, m01 % divider.m01, m02 % divider.m02, m03 % divider.m03, m10 % divider.m10, m11 % divider.m11, m12 % divider.m12, m13 % divider.m13, m20 % divider.m20, m21 % divider.m21, m22 % divider.m22, m23 % divider.m23, m30 % divider.m30, m31 % divider.m31, m32 % divider.m32, m33 % divider.m33 );
    */
}

}
