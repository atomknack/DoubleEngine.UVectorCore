<#@ template language="C#" #>
<#@ output extension=".gen.cs" #>
//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------
<#@ include file="$(ProjectDir)\_Include\_0_AssemplyImports.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_2_GlobalTTInclude.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_4_typeDeclaration.ttinclude" #>

<#@ include file="$(ProjectDir)\_Include\_6_NoVector_Double_typeInitialization.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_6_NoVector_Float_typeInitialization.ttinclude" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;

namespace DoubleEngine
{
    public static partial class MathU
    {
        private const int DEGREES = 360;

<# for (int a=0; a<availableTypes.Count;a++) { UnfoldTypeDescription(availableTypes[a]);#>
        private static <#=b.type#>[] sin<#=b.capital#>;
        private static <#=b.type#>[] cos<#=b.capital#>;
<# } #>

        static MathU()
        {
<# for (int a=0; a<availableTypes.Count;a++) { UnfoldTypeDescription(availableTypes[a]);#>
            sin<#=b.capital#> = new <#=b.type#>[DEGREES];
            cos<#=b.capital#> = new <#=b.type#>[DEGREES];
<# } #>
            for (int i = 0; i < DEGREES; i++)
            {
<# for (int a=0; a<availableTypes.Count;a++) { UnfoldTypeDescription(availableTypes[a]);#>
                sin<#=b.capital#>[i] = (<#=b.type#>)Math.Sin((double)i);
                cos<#=b.capital#>[i] = (<#=b.type#>)Math.Cos((double)i);
<# } #>
            }
        } 
        // all function here need testing
<# for (int a=0; a<availableTypes.Count;a++) { UnfoldTypeDescription(availableTypes[a]);#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=b.type#> DegreesSin_<#=b.capital#>(int deg) => sin<#=b.capital#>[DegreesTo360PositiveDegrees(deg)];
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=b.type#> DegreesCos_<#=b.capital#>(int deg) => cos<#=b.capital#>[DegreesTo360PositiveDegrees(deg)];
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=b.type#> DegreesToRadians_<#=b.capital#>(int deg) => DegreesToRadians((<#=b.type#>)DegreesTo360PositiveDegrees(deg));
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=b.type#> DegreesToHalfRadians_<#=b.capital#>(int deg) => DegreesToRadians((<#=b.type#>)DegreesTo360PositiveDegrees(deg));

<# } #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int DegreesTo360PositiveDegrees(int deg)
        {
            deg = deg % DEGREES;
            return deg < 0 ? DEGREES + deg : deg;
        }
    }
}
