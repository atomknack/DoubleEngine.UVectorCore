<#@ template language="C#" hostspecific="True"#>
<#@ output extension=".gen.cs" #>
<#@ include file="$(ProjectDir)\_Include\_0_AssemplyImports.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_1_ManagerMultipleOutputHelper.ttinclude"#>
<#@ include file="$(ProjectDir)\_Include\_2_GlobalTTInclude.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_4_typeDeclaration.ttinclude" #>

//type include sequence must be same as convertibleTypeNames in order for the indexes to match
<#@ include file="$(ProjectDir)\_Include\_6_Vec2D_typeInitialization.ttinclude" #>
<#@ include file="$(ProjectDir)\_Include\_6_Vec3D_typeInitialization.ttinclude" #>
<# FileInfo t4FileInfo = new FileInfo( this.Host.TemplateFile );#>
//// this file was generated as byproduct of generating *.gen.cs files from master template: <#=t4FileInfo.Name#>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
//from template Vec_ToFrom.tt
<# 
string[] convertibleTypeNames = 
{
"Vec2F",
"Vec3F",
};

/* ////////////
string[] typeNames = 
{
"Vec2D",
"Vec3D",
}; 
string[][] typeFieldNames =
{
    new string[] {"x","y"},
    new string[] {"x","y","z"},
    new string[] {"x","y","z","w"},
    new string[] {"x","y","z","w"}
};
for(var i = 0; i<typeNames.Length; i++){
string typeName = typeNames[i]; 
string convertibleType = convertibleTypeNames[i];
string[] fieldNames = typeFieldNames[i];*/ ///////////////

for(var i = 0; i<convertibleTypeNames.Length; i++)
    {
        string convertibleType = convertibleTypeNames[i];
        UnfoldTypeDescription(availableTypes[i]);
manager.StartNewFile($"Vec_ToFrom_{typeName}.gen.cs"); #>
//----------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by <#=t4FileInfo.Name#>. 
//     Changes will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------
using System;

namespace <#=globalNamespaceName#>
{
    public readonly partial struct <#=typeName#> : IConvertibleToOut<<#=convertibleType#>>
    {
        public <#=convertibleType#> ConvertTo(out <#=convertibleType#> v)
        {
            <#=convertibleType#> t = To<#=convertibleType#>(this);
            v = t;
            return t;
        }
        public <#=convertibleType#> To<#=convertibleType#>() => To<#=convertibleType#>(this);
        public static <#=convertibleType#> To<#=convertibleType#>(<#=typeName#> d) => new <#=convertibleType#>(<#=String.Join(", ",fieldNames.Select(x=> $"(float)d.{x}"))#>);
        public static <#=typeName#> From<#=convertibleType#>(<#=convertibleType#> u) => new <#=typeName#>(<#=String.Join(", ",fieldNames.Select(x=> $"u.{x}"))#>);
        
        [Obsolete("use To or From Convertion method")]
        public static explicit operator <#=convertibleType#>(<#=typeName#> d) =>To<#=convertibleType#>(d);
        [Obsolete("use To or From Convertion method")]
        public static explicit operator <#=typeName#>(<#=convertibleType#> u) => From<#=convertibleType#>(u);
        
    }
}
<# manager.EndBlock();
} #>
<# manager.Process(true); #>